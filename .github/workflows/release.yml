on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get tag name
        run: echo "PLUGIN_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: "Try generating the release notes"
        run: |
          # Version as indicated in the metadata, e.g., 3.2.5-rc
          METADATA_VERSION=${{ env.PLUGIN_VERSION }}
          # We only need the first part of the version, e.g. 3.2.5, for the milestone recognition. Split on the dash (-) character.
          METADATA_ARRAY=(${METADATA_VERSION//-/ })
          POTENTIAL_MILESTONE=${METADATA_ARRAY[0]}
          echo "Will try to create changelog based on milestone ${POTENTIAL_MILESTONE} if it exists..."
          # In case the Jar below fails, fall back to a default text
          echo "PLUGIN_CHANGELOG=\"**Based on plugin's version number (${POTENTIAL_MILESTONE}), we tried finding a milestone with the same name. We couldn't find it though. Make sure it exists (and re-run GitHub Actions) or add a changelog manually!**\"" >> $GITHUB_ENV
          # Download changelog generator
          wget -q https://github.com/spring-io/github-changelog-generator/releases/download/v0.0.5/github-changelog-generator.jar
          # Copy of release-notes.yml to root folder needed, since the Jar can't read from hidden folders anymore (bug): https://github.com/Decathlon/release-notes-generator-action/pull/21
          cp ./.github/release-notes.yml ./release-notes.yml
          java -jar ./github-changelog-generator.jar --spring.config.location="./release-notes.yml" ${POTENTIAL_MILESTONE} plugin-changelog.txt || true
          if [[ -f plugin-changelog.txt ]]; then
            echo 'PLUGIN_CHANGELOG<<EOF' >> $GITHUB_ENV
            cat plugin-changelog.txt >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          fi
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          zip --junk-paths my-artifact README.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.PLUGIN_VERSION }}
          release_name: Mautic WordPress Plugin v${{ env.PLUGIN_VERSION }}
          draft: true
          prerelease: false
          body: |
            ${{ env.PLUGIN_CHANGELOG }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./my-artifact.zip
          asset_name: mautic-wordpress-plugin-v${{ env.PLUGIN_VERSION }}.zip
          asset_content_type: application/zip